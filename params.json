{"name":"Simple-lr-parser","body":"### Welcome to A Simple LR Parser.\r\nSince the given grammer rules can not be reduced to LL grammer format by using\r\nLeft Recursion Removing Algorithms, LR Parser System is used as Parser Engine.\r\nThe SLR(1) parsing table is constructed and feeded to the Parser Engine.\r\n\r\nBasic Usage :\r\n```\r\n/* Grammar */\r\nGrammar* g = new Grammar();\r\ng->loadFromFile(\"grammar.txt\");\r\n    \r\n/* Parser Generator */\r\nSLRParserGenerator* parserGenerator = new SLRParserGenerator(g);\r\nparserGenerator->generate();\r\n    \r\n/* LR Parser */\r\nParser* parser = new Parser(parserGenerator);\r\nparser->loadInputFromFile(\"input.txt\");\r\nparser->parse();\r\n```\r\n\r\n### Files\r\ninput.txt   : Sample character sequence, which the given grammer definitions can recognize.\r\ndebug.txt   : All the working process is buffered to thie file. Initially it is empty.\r\ngrammar.txt : Grammer rules by use of BNF rules\r\nparser.h    : header file of the parser\r\nparser.cpp  : Implementation of header file\r\nmain.cpp    : Simple usage scenario.\r\n\r\n### BNF Rules\r\nterminals \"\", \r\nnon-terminals <> \r\nor |.","tagline":"A Simple LR Parser","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}